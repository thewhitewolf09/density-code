diff --git a/node_modules/react-native/index.js b/node_modules/react-native/index.js
index d59ba34..0b4f316 100644
--- a/node_modules/react-native/index.js
+++ b/node_modules/react-native/index.js
@@ -96,24 +96,24 @@ import typeof RCTDeviceEventEmitter from './Libraries/EventEmitter/RCTDeviceEven
 import typeof RCTNativeAppEventEmitter from './Libraries/EventEmitter/RCTNativeAppEventEmitter';
 import typeof {RootTagContext} from './Libraries/ReactNative/RootTag';
 
-import type {HostComponent as _HostComponentInternal} from './Libraries/Renderer/shims/ReactNativeTypes';
+import type {HostComponent as _HostComponentInternal} from 'react-native/Libraries/Renderer/shims/ReactNativeTypes';
 
 export type HostComponent<T> = _HostComponentInternal<T>;
 
 const invariant = require('invariant');
-const warnOnce = require('./Libraries/Utilities/warnOnce');
+const warnOnce = require('react-native/Libraries/Utilities/warnOnce');
 
 module.exports = {
   // Components
   get AccessibilityInfo(): AccessibilityInfo {
-    return require('./Libraries/Components/AccessibilityInfo/AccessibilityInfo')
+    return require('react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo')
       .default;
   },
   get ActivityIndicator(): ActivityIndicator {
-    return require('./Libraries/Components/ActivityIndicator/ActivityIndicator');
+    return require('react-native/Libraries/Components/ActivityIndicator/ActivityIndicator');
   },
   get Button(): Button {
-    return require('./Libraries/Components/Button');
+    return require('react-native/Libraries/Components/Button');
   },
   // $FlowFixMe[value-as-type]
   get DatePickerIOS(): DatePickerIOS {
@@ -130,19 +130,19 @@ module.exports = {
     return require('./Libraries/Components/DrawerAndroid/DrawerLayoutAndroid');
   },
   get FlatList(): FlatList {
-    return require('./Libraries/Lists/FlatList');
+    return require('react-native/Libraries/Lists/FlatList');
   },
   get Image(): Image {
     return require('./Libraries/Image/Image');
   },
   get ImageBackground(): ImageBackground {
-    return require('./Libraries/Image/ImageBackground');
+    return require('react-native/Libraries/Image/ImageBackground');
   },
   get InputAccessoryView(): InputAccessoryView {
-    return require('./Libraries/Components/TextInput/InputAccessoryView');
+    return require('react-native/Libraries/Components/TextInput/InputAccessoryView');
   },
   get KeyboardAvoidingView(): KeyboardAvoidingView {
-    return require('./Libraries/Components/Keyboard/KeyboardAvoidingView')
+    return require('react-native/Libraries/Components/Keyboard/KeyboardAvoidingView')
       .default;
   },
   get MaskedViewIOS(): MaskedViewIOS {
@@ -155,10 +155,10 @@ module.exports = {
     return require('./Libraries/Components/MaskedView/MaskedViewIOS');
   },
   get Modal(): Modal {
-    return require('./Libraries/Modal/Modal');
+    return require('react-native/Libraries/Modal/Modal');
   },
   get Pressable(): Pressable {
-    return require('./Libraries/Components/Pressable/Pressable').default;
+    return require('react-native/Libraries/Components/Pressable/Pressable').default;
   },
   // $FlowFixMe[value-as-type]
   get ProgressBarAndroid(): ProgressBarAndroid {
@@ -181,16 +181,16 @@ module.exports = {
     return require('./Libraries/Components/ProgressViewIOS/ProgressViewIOS');
   },
   get RefreshControl(): RefreshControl {
-    return require('./Libraries/Components/RefreshControl/RefreshControl');
+    return require('react-native/Libraries/Components/RefreshControl/RefreshControl');
   },
   get SafeAreaView(): SafeAreaView {
-    return require('./Libraries/Components/SafeAreaView/SafeAreaView').default;
+    return require('react-native/Libraries/Components/SafeAreaView/SafeAreaView').default;
   },
   get ScrollView(): ScrollView {
-    return require('./Libraries/Components/ScrollView/ScrollView');
+    return require('react-native/Libraries/Components/ScrollView/ScrollView');
   },
   get SectionList(): SectionList {
-    return require('./Libraries/Lists/SectionList').default;
+    return require('react-native/Libraries/Lists/SectionList').default;
   },
   get Slider(): Slider {
     warnOnce(
@@ -199,63 +199,63 @@ module.exports = {
         "It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. " +
         'See https://github.com/callstack/react-native-slider',
     );
-    return require('./Libraries/Components/Slider/Slider');
+    return require('react-native/Libraries/Components/Slider/Slider');
   },
   get StatusBar(): StatusBar {
-    return require('./Libraries/Components/StatusBar/StatusBar');
+    return require('react-native/Libraries/Components/StatusBar/StatusBar');
   },
   get Switch(): Switch {
-    return require('./Libraries/Components/Switch/Switch').default;
+    return require('react-native/Libraries/Components/Switch/Switch').default;
   },
   get Text(): Text {
-    return require('./Libraries/Text/Text');
+    return require('react-native/Libraries/Text/Text');
   },
   get TextInput(): TextInput {
-    return require('./Libraries/Components/TextInput/TextInput');
+    return require('react-native/Libraries/Components/TextInput/TextInput');
   },
   get Touchable(): Touchable {
-    return require('./Libraries/Components/Touchable/Touchable');
+    return require('react-native/Libraries/Components/Touchable/Touchable');
   },
   get TouchableHighlight(): TouchableHighlight {
-    return require('./Libraries/Components/Touchable/TouchableHighlight');
+    return require('react-native/Libraries/Components/Touchable/TouchableHighlight');
   },
   get TouchableNativeFeedback(): TouchableNativeFeedback {
-    return require('./Libraries/Components/Touchable/TouchableNativeFeedback');
+    return require('react-native/Libraries/Components/Touchable/TouchableNativeFeedback');
   },
   get TouchableOpacity(): TouchableOpacity {
-    return require('./Libraries/Components/Touchable/TouchableOpacity');
+    return require('react-native/Libraries/Components/Touchable/TouchableOpacity');
   },
   get TouchableWithoutFeedback(): TouchableWithoutFeedback {
-    return require('./Libraries/Components/Touchable/TouchableWithoutFeedback');
+    return require('react-native/Libraries/Components/Touchable/TouchableWithoutFeedback');
   },
   get View(): View {
-    return require('./Libraries/Components/View/View');
+    return require('react-native/Libraries/Components/View/View');
   },
   get VirtualizedList(): VirtualizedList {
-    return require('./Libraries/Lists/VirtualizedList');
+    return require('react-native/Libraries/Lists/VirtualizedList');
   },
   get VirtualizedSectionList(): VirtualizedSectionList {
-    return require('./Libraries/Lists/VirtualizedSectionList');
+    return require('react-native/Libraries/Lists/VirtualizedSectionList');
   },
 
   // APIs
   get ActionSheetIOS(): ActionSheetIOS {
-    return require('./Libraries/ActionSheetIOS/ActionSheetIOS');
+    return require('react-native/Libraries/ActionSheetIOS/ActionSheetIOS');
   },
   get Alert(): Alert {
-    return require('./Libraries/Alert/Alert');
+    return require('react-native/Libraries/Alert/Alert');
   },
   get Animated(): Animated {
-    return require('./Libraries/Animated/Animated');
+    return require('react-native/Libraries/Animated/Animated');
   },
   get Appearance(): Appearance {
-    return require('./Libraries/Utilities/Appearance');
+    return require('react-native/Libraries/Utilities/Appearance');
   },
   get AppRegistry(): AppRegistry {
-    return require('./Libraries/ReactNative/AppRegistry');
+    return require('react-native/Libraries/ReactNative/AppRegistry');
   },
   get AppState(): AppState {
-    return require('./Libraries/AppState/AppState');
+    return require('react-native/Libraries/AppState/AppState');
   },
   // $FlowFixMe[value-as-type]
   get AsyncStorage(): AsyncStorage {
@@ -265,7 +265,7 @@ module.exports = {
         "It can now be installed and imported from '@react-native-async-storage/async-storage' instead of 'react-native'. " +
         'See https://github.com/react-native-async-storage/async-storage',
     );
-    return require('./Libraries/Storage/AsyncStorage');
+    return require('react-native/Libraries/Storage/AsyncStorage');
   },
   get BackHandler(): BackHandler {
     return require('./Libraries/Utilities/BackHandler');
@@ -277,25 +277,25 @@ module.exports = {
         "It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. " +
         'See https://github.com/react-native-clipboard/clipboard',
     );
-    return require('./Libraries/Components/Clipboard/Clipboard');
+    return require('react-native/Libraries/Components/Clipboard/Clipboard');
   },
   get DeviceInfo(): DeviceInfo {
-    return require('./Libraries/Utilities/DeviceInfo');
+    return require('react-native/Libraries/Utilities/DeviceInfo');
   },
   get DevSettings(): DevSettings {
-    return require('./Libraries/Utilities/DevSettings');
+    return require('react-native/Libraries/Utilities/DevSettings');
   },
   get Dimensions(): Dimensions {
-    return require('./Libraries/Utilities/Dimensions');
+    return require('react-native/Libraries/Utilities/Dimensions');
   },
   get Easing(): Easing {
-    return require('./Libraries/Animated/Easing');
+    return require('react-native/Libraries/Animated/Easing');
   },
   get findNodeHandle(): $PropertyType<ReactNative, 'findNodeHandle'> {
-    return require('./Libraries/Renderer/shims/ReactNative').findNodeHandle;
+    return require('react-native/Libraries/Renderer/shims/ReactNative').findNodeHandle;
   },
   get I18nManager(): I18nManager {
-    return require('./Libraries/ReactNative/I18nManager');
+    return require('react-native/Libraries/ReactNative/I18nManager');
   },
   get ImagePickerIOS(): ImagePickerIOS {
     warnOnce(
@@ -305,41 +305,41 @@ module.exports = {
         "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. " +
         'See https://github.com/rnc-archive/react-native-image-picker-ios',
     );
-    return require('./Libraries/Image/ImagePickerIOS');
+    return require('react-native/Libraries/Image/ImagePickerIOS');
   },
   get InteractionManager(): InteractionManager {
-    return require('./Libraries/Interaction/InteractionManager');
+    return require('react-native/Libraries/Interaction/InteractionManager');
   },
   get Keyboard(): Keyboard {
-    return require('./Libraries/Components/Keyboard/Keyboard');
+    return require('react-native/Libraries/Components/Keyboard/Keyboard');
   },
   get LayoutAnimation(): LayoutAnimation {
-    return require('./Libraries/LayoutAnimation/LayoutAnimation');
+    return require('react-native/Libraries/LayoutAnimation/LayoutAnimation');
   },
   get Linking(): Linking {
-    return require('./Libraries/Linking/Linking');
+    return require('react-native/Libraries/Linking/Linking');
   },
   get LogBox(): LogBox {
-    return require('./Libraries/LogBox/LogBox');
+    return require('react-native/Libraries/LogBox/LogBox');
   },
   get NativeDialogManagerAndroid(): NativeDialogManagerAndroid {
-    return require('./Libraries/NativeModules/specs/NativeDialogManagerAndroid')
+    return require('react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid')
       .default;
   },
   get NativeEventEmitter(): NativeEventEmitter {
-    return require('./Libraries/EventEmitter/NativeEventEmitter').default;
+    return require('react-native/Libraries/EventEmitter/NativeEventEmitter').default;
   },
   get Networking(): Networking {
     return require('./Libraries/Network/RCTNetworking');
   },
   get PanResponder(): PanResponder {
-    return require('./Libraries/Interaction/PanResponder');
+    return require('react-native/Libraries/Interaction/PanResponder');
   },
   get PermissionsAndroid(): PermissionsAndroid {
-    return require('./Libraries/PermissionsAndroid/PermissionsAndroid');
+    return require('react-native/Libraries/PermissionsAndroid/PermissionsAndroid');
   },
   get PixelRatio(): PixelRatio {
-    return require('./Libraries/Utilities/PixelRatio');
+    return require('react-native/Libraries/Utilities/PixelRatio');
   },
   get PushNotificationIOS(): PushNotificationIOS {
     warnOnce(
@@ -348,66 +348,66 @@ module.exports = {
         "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " +
         'See https://github.com/react-native-push-notification-ios/push-notification-ios',
     );
-    return require('./Libraries/PushNotificationIOS/PushNotificationIOS');
+    return require('react-native/Libraries/PushNotificationIOS/PushNotificationIOS');
   },
   get Settings(): Settings {
     return require('./Libraries/Settings/Settings');
   },
   get Share(): Share {
-    return require('./Libraries/Share/Share');
+    return require('react-native/Libraries/Share/Share');
   },
   get StyleSheet(): StyleSheet {
-    return require('./Libraries/StyleSheet/StyleSheet');
+    return require('react-native/Libraries/StyleSheet/StyleSheet');
   },
   get Systrace(): Systrace {
-    return require('./Libraries/Performance/Systrace');
+    return require('react-native/Libraries/Performance/Systrace');
   },
   // $FlowFixMe[value-as-type]
   get ToastAndroid(): ToastAndroid {
     return require('./Libraries/Components/ToastAndroid/ToastAndroid');
   },
   get TurboModuleRegistry(): TurboModuleRegistry {
-    return require('./Libraries/TurboModule/TurboModuleRegistry');
+    return require('react-native/Libraries/TurboModule/TurboModuleRegistry');
   },
   get UIManager(): UIManager {
-    return require('./Libraries/ReactNative/UIManager');
+    return require('react-native/Libraries/ReactNative/UIManager');
   },
   get unstable_batchedUpdates(): $PropertyType<
     ReactNative,
     'unstable_batchedUpdates',
   > {
-    return require('./Libraries/Renderer/shims/ReactNative')
+    return require('react-native/Libraries/Renderer/shims/ReactNative')
       .unstable_batchedUpdates;
   },
   get useColorScheme(): useColorScheme {
-    return require('./Libraries/Utilities/useColorScheme').default;
+    return require('react-native/Libraries/Utilities/useColorScheme').default;
   },
   get useWindowDimensions(): useWindowDimensions {
-    return require('./Libraries/Utilities/useWindowDimensions').default;
+    return require('react-native/Libraries/Utilities/useWindowDimensions').default;
   },
   get UTFSequence(): UTFSequence {
-    return require('./Libraries/UTFSequence');
+    return require('react-native/Libraries/UTFSequence');
   },
   get Vibration(): Vibration {
-    return require('./Libraries/Vibration/Vibration');
+    return require('react-native/Libraries/Vibration/Vibration');
   },
   get YellowBox(): YellowBox {
-    return require('./Libraries/YellowBox/YellowBoxDeprecated');
+    return require('react-native/Libraries/YellowBox/YellowBoxDeprecated');
   },
 
   // Plugins
   get DeviceEventEmitter(): RCTDeviceEventEmitter {
-    return require('./Libraries/EventEmitter/RCTDeviceEventEmitter').default;
+    return require('react-native/Libraries/EventEmitter/RCTDeviceEventEmitter').default;
   },
   get DynamicColorIOS(): DynamicColorIOS {
-    return require('./Libraries/StyleSheet/PlatformColorValueTypesIOS')
+    return require('react-native/Libraries/StyleSheet/PlatformColorValueTypesIOS')
       .DynamicColorIOS;
   },
   get NativeAppEventEmitter(): RCTNativeAppEventEmitter {
-    return require('./Libraries/EventEmitter/RCTNativeAppEventEmitter');
+    return require('react-native/Libraries/EventEmitter/RCTNativeAppEventEmitter');
   },
   get NativeModules(): NativeModules {
-    return require('./Libraries/BatchedBridge/NativeModules');
+    return require('react-native/Libraries/BatchedBridge/NativeModules');
   },
   get Platform(): Platform {
     return require('./Libraries/Utilities/Platform');
@@ -417,15 +417,15 @@ module.exports = {
       .PlatformColor;
   },
   get processColor(): processColor {
-    return require('./Libraries/StyleSheet/processColor');
+    return require('react-native/Libraries/StyleSheet/processColor');
   },
   get requireNativeComponent(): <T>(
     uiViewClassName: string,
   ) => HostComponent<T> {
-    return require('./Libraries/ReactNative/requireNativeComponent');
+    return require('react-native/Libraries/ReactNative/requireNativeComponent');
   },
   get RootTagContext(): RootTagContext {
-    return require('./Libraries/ReactNative/RootTag').RootTagContext;
+    return require('react-native/Libraries/ReactNative/RootTag').RootTagContext;
   },
   get unstable_enableLogBox(): () => void {
     return () =>
@@ -435,33 +435,17 @@ module.exports = {
   },
   // Deprecated Prop Types
   get ColorPropType(): $FlowFixMe {
-    invariant(
-      false,
-      'ColorPropType has been removed from React Native. Migrate to ' +
-        "ColorPropType exported from 'deprecated-react-native-prop-types'.",
-    );
+    return require('deprecated-react-native-prop-types').ColorPropType;
   },
   get EdgeInsetsPropType(): $FlowFixMe {
-    invariant(
-      false,
-      'EdgeInsetsPropType has been removed from React Native. Migrate to ' +
-        "EdgeInsetsPropType exported from 'deprecated-react-native-prop-types'.",
-    );
+    return require('deprecated-react-native-prop-types').EdgeInsetsPropType;
   },
   get PointPropType(): $FlowFixMe {
-    invariant(
-      false,
-      'PointPropType has been removed from React Native. Migrate to ' +
-        "PointPropType exported from 'deprecated-react-native-prop-types'.",
-    );
+    return require('deprecated-react-native-prop-types').PointPropType;
   },
   get ViewPropTypes(): $FlowFixMe {
-    invariant(
-      false,
-      'ViewPropTypes has been removed from React Native. Migrate to ' +
-        "ViewPropTypes exported from 'deprecated-react-native-prop-types'.",
-    );
-  },
+    return require('deprecated-react-native-prop-types').ViewPropTypes;
+  }
 };
 
 if (__DEV__) {
